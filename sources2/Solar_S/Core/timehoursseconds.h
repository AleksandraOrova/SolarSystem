#ifndef TIMEHOURSSECONDS_H
#define TIMEHOURSSECONDS_H

//TODO задокументировать Doxygen'ом
//Название класса не полностью отражает его содержимое.
//В нем же есть еще days и years.
//Думаю, Time достаточно
//TODO переименовать класс TimeHoursSeconds
class TimeHoursSeconds
{
private:
//Пышкин Е.В. на лекциях говорил, что классно сначала объявлять public функции (интерфейс класса, функции доступа к данным)
//А после них уже private функции и данные.
//Это можно аргументировать тем, что удобно видеть пользователю класса сначала то, что можно будет ему использовать, а
//не то, что закрыто.
//TODO поменять местами public и private.
    double second;
    double hour;
    double day;
    double year;
public:
//чтобы понять, что такое s, h, d и y, надо смотреть на данные класса. Посмотрев только на интерфейс, что будет делать пользователь,
//понять ничего нельзя.
//TODO дать нормальные названия переменным в констукторе
//Когда функция не генерирует исключений, классно приписывать модификатор noexcept.
//почему это классно, объясняется в Мейерс "Эффективный и современный c++ 11 и 14"
//TODO добавить noexcept ко всем функциям, которые не генерируют исключений.
//TODO добавить const к аргументам функций, где только возможно.
    TimeHoursSeconds(double s, double h, double d, double y);
    //Все шесть функций ниже не вносят изменеий в состояние объекта. а к таким приписывают const.
    //Исключений они тоже не генерируют.
    //TODO добавить const ко всем функциям, которые не изменяют объект.
    //не сразу можно понять по названию, что функции делают.
    //не хочется думать, что такое s, h, y
    //TODO переименовать метод см. Фаулер "Рефакторинг"
    double fromStoHours();
    //TODO переименовать метод
    double fromStoDays();
    //TODO переименовать метод
    double fromStoYears();
    //TODO переименовать метод
    double fromDaysToH();
    //TODO переименовать метод
    double fromDaysToS();
    //TODO переименовать метод
    double fromDaysToY();
};

#endif // TIMEHOURSSECONDS_H
